name: default

on: push

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
  unit-tests:
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"

      - name: Run unit tests
        run: make test
  acc-tests:
    runs-on: ubuntu-latest
    name: acc-tests
    env:
      REVIZOR_URL: ${{ secrets.REVIZOR_URL }}
      REVIZOR_TOKEN: ${{ secrets.REVIZOR_TOKEN }}
      SCALR_TOKEN: ${{ secrets.SCALR_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - name: Set API_BRANCH
        if: ${{ contains(github.event.head_commit.message, '[API_BRANCH]') }}
        run: echo "API_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Set DB_BRANCH
        if: ${{ contains(github.event.head_commit.message, '[DB_BRANCH]') }}
        run: echo "DB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      - name: Create container
        id: create
        uses: Scalr/gh-action-revizor@master
        with:
          command: create
      - name: Run acceptance tests
        env:
          SCALR_HOSTNAME: ${{ steps.create.outputs.hostname }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make testacc
      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=covprofile -service=github
      - name: Delete container
        id: delete
        if: ${{ always() && steps.create.outputs.container_id }}
        uses: Scalr/gh-action-revizor@master
        with:
          command: delete
          container_id: ${{ steps.create.outputs.container_id }}
  release:
    name: release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [lint, unit-tests, acc-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Import GPG key
        id: import_gpg
        uses: Scalr/ghaction-import-gpg@v2.1.1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
      - name: Upload provider to registry
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          GPG_KEY_ID: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_PUB_KEY: ${{ steps.import_gpg.outputs.pubkey }}
        run: bash scripts/upload.sh